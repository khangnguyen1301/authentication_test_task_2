{
	"info": {
		"_postman_id": "auth-system-2025",
		"name": "Authentication System - JWT RSA",
		"description": "Authentication System s·ª≠ d·ª•ng JWT v·ªõi m√£ h√≥a b·∫•t ƒë·ªëi x·ª©ng RSA.\n\n## Features:\n- RSA-2048 Asymmetric Encryption\n- HTTP-Only Cookies cho Refresh Token\n- Role-based Access Control\n- Auto x-client-id header\n\n## Quick Start:\n1. Register account\n2. Login ‚Üí auto save userId v√† accessToken\n3. C√°c request kh√°c t·ª± ƒë·ªông d√πng token ƒë√£ save\n\n## Variables Auto-Saved:\n- `accessToken` - Access token t·ª´ login\n- `userId` - User ID t·ª´ login\n- `userEmail` - Email t·ª´ login",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test response",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"    pm.expect(jsonData.data).to.have.property('username');",
							"});",
							"",
							"// Auto-save user info",
							"if (pm.response.code === 201) {",
							"    try {",
							"        var jsonData = pm.response.json();",
							"        console.log(\"üì¶ Full Response:\", JSON.stringify(jsonData, null, 2));",
							"        ",
							"        if (jsonData.data && jsonData.data.id) {",
							"            pm.collectionVariables.set(\"userId\", jsonData.data.id.toString());",
							"            pm.collectionVariables.set(\"userEmail\", jsonData.data.email);",
							"            console.log(\"‚úÖ Registered successfully!\");",
							"            console.log(\"üìù User ID saved:\", jsonData.data.id);",
							"            console.log(\"üìß Email saved:\", jsonData.data.email);",
							"        } else {",
							"            console.error(\"‚ùå Cannot find user ID in response\");",
							"        }",
							"    } catch (e) {",
							"        console.error(\"‚ùå Error parsing response:\", e);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"Test@123456\",\n  \"role\": \"user\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				},
				"description": "ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi.\n\n**Request Body:**\n- `username` - T√™n ƒëƒÉng nh·∫≠p (unique)\n- `email` - Email (unique)\n- `password` - M·∫≠t kh·∫©u (minimum 8 chars)\n- `role` - Vai tr√≤ (user/admin/moderator) - optional, default: user\n\n**Response:**\n- T·∫°o user m·ªõi\n- T·ª± ƒë·ªông t·∫°o RSA key pair cho user\n- Tr·∫£ v·ªÅ user info (kh√¥ng c√≥ password)\n\n**Auto-saved:**\n- `userId` - ID c·ªßa user v·ª´a t·∫°o\n- `userEmail` - Email c·ªßa user"
			},
			"response": []
		},
		{
			"name": "2. Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test response",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has access token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('accessToken');",
							"    pm.expect(jsonData.data).to.have.property('user');",
							"});",
							"",
							"pm.test(\"Refresh token in cookie\", function () {",
							"    pm.expect(pm.cookies.has('refreshToken')).to.be.true;",
							"});",
							"",
							"// Auto-save tokens v√† user info",
							"if (pm.response.code === 200) {",
							"    try {",
							"        var jsonData = pm.response.json();",
							"        console.log(\"üì¶ Full Response:\", JSON.stringify(jsonData, null, 2));",
							"        ",
							"        if (jsonData.data && jsonData.data.accessToken && jsonData.data.user) {",
							"            // Save access token",
							"            pm.collectionVariables.set(\"accessToken\", jsonData.data.accessToken);",
							"            ",
							"            // Save user info",
							"            pm.collectionVariables.set(\"userId\", jsonData.data.user.id.toString());",
							"            pm.collectionVariables.set(\"userEmail\", jsonData.data.user.email);",
							"            pm.collectionVariables.set(\"username\", jsonData.data.user.username);",
							"            ",
							"            console.log(\"‚úÖ Login successful!\");",
							"            console.log(\"üìù User ID saved:\", jsonData.data.user.id);",
							"            console.log(\"ÔøΩ Email saved:\", jsonData.data.user.email);",
							"            console.log(\"üë§ Username saved:\", jsonData.data.user.username);",
							"            console.log(\"ÔøΩüîë Access Token saved:\", jsonData.data.accessToken.substring(0, 20) + '...');",
							"            console.log(\"üç™ Refresh Token in cookie\");",
							"        } else {",
							"            console.error(\"‚ùå Cannot find required data in response\");",
							"        }",
							"    } catch (e) {",
							"        console.error(\"‚ùå Error parsing response:\", e);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"Test@123456\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng.\n\n**Request Body:**\n- `email` - Email ƒë√£ ƒëƒÉng k√Ω\n- `password` - M·∫≠t kh·∫©u\n\n**Response:**\n- `accessToken` - JWT token (expires in 1 hour)\n- `expiresIn` - Th·ªùi gian h·∫øt h·∫°n (seconds)\n- `user` - Th√¥ng tin user\n\n**Cookie:**\n- `refreshToken` - HTTP-Only cookie (expires in 7 days)\n\n**Auto-saved:**\n- `accessToken` - S·ª≠ d·ª•ng cho c√°c request ti·∫øp theo\n- `userId` - T·ª± ƒë·ªông g·∫Øn v√†o header x-client-id\n- `userEmail` - Email c·ªßa user\n- `username` - Username"
			},
			"response": []
		},
		{
			"name": "3. Get Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has user profile\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"    pm.expect(jsonData.data).to.have.property('username');",
							"    pm.expect(jsonData.data).to.have.property('role');",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    try {",
							"        var jsonData = pm.response.json();",
							"        console.log(\"‚úÖ Profile retrieved successfully!\");",
							"        console.log(\"üì¶ Profile data:\", JSON.stringify(jsonData.data, null, 2));",
							"    } catch (e) {",
							"        console.error(\"‚ùå Error parsing response:\", e);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Check if tokens exist",
							"const token = pm.collectionVariables.get(\"accessToken\");",
							"const userId = pm.collectionVariables.get(\"userId\");",
							"",
							"if (!token) {",
							"    console.error(\"‚ùå Access token not found. Please login first!\");",
							"} else {",
							"    console.log(\"üîë Using access token:\", token.substring(0, 20) + '...');",
							"}",
							"",
							"if (!userId) {",
							"    console.error(\"‚ùå User ID not found. Please login first!\");",
							"} else {",
							"    console.log(\"üìù Using User ID:\", userId);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "x-client-id",
						"value": "{{userId}}",
						"type": "text",
						"description": "User ID - Required for JWT verification"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/auth/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"profile"
					]
				},
				"description": "L·∫•y th√¥ng tin profile c·ªßa user ƒëang login.\n\n**Headers Required:**\n- `Authorization: Bearer {{accessToken}}` - Auto t·ª´ login\n- `x-client-id: {{userId}}` - Auto t·ª´ login\n\n**Response:**\n- Th√¥ng tin user hi·ªán t·∫°i\n- Role v√† permissions\n- `canEdit` - Quy·ªÅn ch·ªânh s·ª≠a (admin only)\n\n**Note:**\n- Access token h·∫øt h·∫°n sau 1 hour\n- N·∫øu expired ‚Üí d√πng Refresh Token endpoint"
			},
			"response": []
		},
		{
			"name": "4. Refresh Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has new access token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.have.property('accessToken');",
							"});",
							"",
							"// Auto-save new access token",
							"if (pm.response.code === 200) {",
							"    try {",
							"        var jsonData = pm.response.json();",
							"        console.log(\"üì¶ Refresh Response:\", JSON.stringify(jsonData, null, 2));",
							"        ",
							"        if (jsonData.data && jsonData.data.accessToken) {",
							"            pm.collectionVariables.set(\"accessToken\", jsonData.data.accessToken);",
							"            console.log(\"‚úÖ Token refreshed successfully!\");",
							"            console.log(\"üîë New access token saved:\", jsonData.data.accessToken.substring(0, 20) + '...');",
							"            console.log(\"üç™ New refresh token in cookie\");",
							"        } else {",
							"            console.error(\"‚ùå Cannot find access token in response\");",
							"        }",
							"    } catch (e) {",
							"        console.error(\"‚ùå Error parsing response:\", e);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Check if userId exists",
							"const userId = pm.collectionVariables.get(\"userId\");",
							"const token = pm.collectionVariables.get(\"accessToken\");",
							"",
							"if (!userId) {",
							"    console.error(\"‚ùå User ID not found. Please login first!\");",
							"} else {",
							"    console.log(\"üìù Using User ID:\", userId);",
							"}",
							"",
							"// Old access token is required (even if expired)",
							"if (!token) {",
							"    console.warn(\"‚ö†Ô∏è Access token not found. Please login first!\");",
							"} else {",
							"    console.log(\"üîë Using old token:\", token.substring(0, 20) + '...');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-client-id",
						"value": "{{userId}}",
						"type": "text",
						"description": "User ID - Required for JWT verification"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/auth/refresh",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"refresh"
					]
				},
				"description": "L√†m m·ªõi access token khi h·∫øt h·∫°n.\n\n**Headers Required:**\n- `Authorization: Bearer {{accessToken}}` - Old access token (d√π ƒë√£ expired)\n- `x-client-id: {{userId}}` - User ID\n\n**Cookie Required:**\n- `refreshToken` - HTTP-Only cookie t·ª´ login\n\n**Process:**\n1. Verify refresh token t·ª´ cookie\n2. Generate new access token (1h)\n3. Generate new refresh token (7d)\n4. Revoke old refresh token\n5. Update cookie v·ªõi new refresh token\n\n**Response:**\n- `accessToken` - New access token\n- `expiresIn` - 3600 seconds (1 hour)\n\n**Auto-saved:**\n- `accessToken` - New token t·ª± ƒë·ªông replace token c≈©\n\n**Note:**\n- Refresh token h·∫øt h·∫°n sau 7 ng√†y\n- N·∫øu refresh token expired ‚Üí ph·∫£i login l·∫°i"
			},
			"response": []
		},
		{
			"name": "5. Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Refresh token cookie cleared\", function () {",
							"    // Cookie should be cleared after logout",
							"    var cookie = pm.cookies.get('refreshToken');",
							"    pm.expect(cookie).to.be.oneOf([undefined, null, '']);",
							"});",
							"",
							"// Clear saved variables",
							"if (pm.response.code === 200) {",
							"    try {",
							"        var jsonData = pm.response.json();",
							"        console.log(\"üì¶ Logout Response:\", JSON.stringify(jsonData, null, 2));",
							"        ",
							"        pm.collectionVariables.set(\"accessToken\", \"\");",
							"        pm.collectionVariables.set(\"userId\", \"\");",
							"        pm.collectionVariables.set(\"userEmail\", \"\");",
							"        pm.collectionVariables.set(\"username\", \"\");",
							"        ",
							"        console.log(\"‚úÖ Logout successful!\");",
							"        console.log(\"üóëÔ∏è All tokens and user data cleared\");",
							"        console.log(\"üîë All RSA keys revoked\");",
							"        console.log(\"‚ö†Ô∏è You need to login again\");",
							"    } catch (e) {",
							"        console.error(\"‚ùå Error during logout:\", e);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Check if tokens exist",
							"const token = pm.collectionVariables.get(\"accessToken\");",
							"const userId = pm.collectionVariables.get(\"userId\");",
							"",
							"if (!token) {",
							"    console.error(\"‚ùå Access token not found. You are not logged in!\");",
							"} else {",
							"    console.log(\"üîë Using access token:\", token.substring(0, 20) + '...');",
							"}",
							"",
							"if (!userId) {",
							"    console.error(\"‚ùå User ID not found. You are not logged in!\");",
							"} else {",
							"    console.log(\"üìù Logging out User ID:\", userId);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-client-id",
						"value": "{{userId}}",
						"type": "text",
						"description": "User ID - Required for JWT verification"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/auth/logout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"logout"
					]
				},
				"description": "ƒêƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng.\n\n**Headers Required:**\n- `Authorization: Bearer {{accessToken}}`\n- `x-client-id: {{userId}}`\n\n**Cookie Required:**\n- `refreshToken` - HTTP-Only cookie\n\n**Process:**\n1. Revoke refresh token trong database\n2. Deactivate ALL RSA key pairs c·ªßa user\n3. Clear refresh token cookie\n4. All access tokens become invalid immediately\n\n**Response:**\n- Success message\n- `keysRevoked: true`\n- Warning: T·∫•t c·∫£ tokens ƒë√£ b·ªã v√¥ hi·ªáu h√≥a\n\n**Effect:**\n- ‚úÖ Refresh token b·ªã revoke\n- ‚úÖ T·∫•t c·∫£ RSA keys b·ªã deactivate\n- ‚úÖ T·∫•t c·∫£ access tokens (k·ªÉ c·∫£ ch∆∞a expired) invalid ngay l·∫≠p t·ª©c\n- ‚úÖ User b·∫Øt bu·ªôc ph·∫£i login l·∫°i\n\n**Auto-cleared:**\n- All collection variables (accessToken, userId, etc.)\n\n**Security:**\n- ƒê√¢y l√† \"Secure Logout\" - invalidate t·∫•t c·∫£ tokens\n- Ph√π h·ª£p khi logout t·ª´ device quan tr·ªçng"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log(\"üöÄ Request to:\", pm.request.url.toString());",
					"",
					"// Log current auth state",
					"const hasToken = !!pm.collectionVariables.get(\"accessToken\");",
					"const hasUserId = !!pm.collectionVariables.get(\"userId\");",
					"",
					"if (hasToken && hasUserId) {",
					"    console.log(\"‚úÖ Authenticated as:\", pm.collectionVariables.get(\"userEmail\"));",
					"} else if (!hasToken && !hasUserId) {",
					"    console.log(\"‚ÑπÔ∏è Not authenticated. Login first if needed.\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"const responseTime = pm.response.responseTime;",
					"console.log(\"‚è±Ô∏è Response time:\", responseTime + \"ms\");",
					"",
					"// Check for common errors",
					"if (pm.response.code === 401) {",
					"    console.error(\"‚ùå Unauthorized - Token expired or invalid\");",
					"    console.log(\"üí° Try: Login again or Refresh token\");",
					"} else if (pm.response.code === 403) {",
					"    console.error(\"‚ùå Forbidden - Insufficient permissions\");",
					"} else if (pm.response.code === 429) {",
					"    console.error(\"‚ùå Too Many Requests - Rate limit exceeded\");",
					"    console.log(\"üí° Wait a moment and try again\");",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": "",
			"type": "string"
		}
	]
}
